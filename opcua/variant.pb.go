// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.4
// source: opcua/variant.proto

package opcua

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{0}
}

type BooleanArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []bool `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *BooleanArray) Reset() {
	*x = BooleanArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanArray) ProtoMessage() {}

func (x *BooleanArray) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanArray.ProtoReflect.Descriptor instead.
func (*BooleanArray) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{1}
}

func (x *BooleanArray) GetValue() []bool {
	if x != nil {
		return x.Value
	}
	return nil
}

type Int32Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []int32 `protobuf:"zigzag32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *Int32Array) Reset() {
	*x = Int32Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Array) ProtoMessage() {}

func (x *Int32Array) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Array.ProtoReflect.Descriptor instead.
func (*Int32Array) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{2}
}

func (x *Int32Array) GetValue() []int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type UInt32Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []uint32 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *UInt32Array) Reset() {
	*x = UInt32Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt32Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt32Array) ProtoMessage() {}

func (x *UInt32Array) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt32Array.ProtoReflect.Descriptor instead.
func (*UInt32Array) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{3}
}

func (x *UInt32Array) GetValue() []uint32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type Int64Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []int64 `protobuf:"zigzag64,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *Int64Array) Reset() {
	*x = Int64Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Array) ProtoMessage() {}

func (x *Int64Array) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Array.ProtoReflect.Descriptor instead.
func (*Int64Array) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{4}
}

func (x *Int64Array) GetValue() []int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type UInt64Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []uint64 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *UInt64Array) Reset() {
	*x = UInt64Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt64Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64Array) ProtoMessage() {}

func (x *UInt64Array) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64Array.ProtoReflect.Descriptor instead.
func (*UInt64Array) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{5}
}

func (x *UInt64Array) GetValue() []uint64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type FloatArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []float32 `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *FloatArray) Reset() {
	*x = FloatArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatArray) ProtoMessage() {}

func (x *FloatArray) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatArray.ProtoReflect.Descriptor instead.
func (*FloatArray) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{6}
}

func (x *FloatArray) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type DoubleArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []float64 `protobuf:"fixed64,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *DoubleArray) Reset() {
	*x = DoubleArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleArray) ProtoMessage() {}

func (x *DoubleArray) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleArray.ProtoReflect.Descriptor instead.
func (*DoubleArray) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{7}
}

func (x *DoubleArray) GetValue() []float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type StringArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *StringArray) Reset() {
	*x = StringArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArray) ProtoMessage() {}

func (x *StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArray.ProtoReflect.Descriptor instead.
func (*StringArray) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{8}
}

func (x *StringArray) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type TimestampArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*timestamp.Timestamp `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *TimestampArray) Reset() {
	*x = TimestampArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampArray) ProtoMessage() {}

func (x *TimestampArray) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampArray.ProtoReflect.Descriptor instead.
func (*TimestampArray) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{9}
}

func (x *TimestampArray) GetValue() []*timestamp.Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

type BytesArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value [][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *BytesArray) Reset() {
	*x = BytesArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesArray) ProtoMessage() {}

func (x *BytesArray) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesArray.ProtoReflect.Descriptor instead.
func (*BytesArray) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{10}
}

func (x *BytesArray) GetValue() [][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Variant message.
type Variant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Variant_Null
	//	*Variant_Boolean
	//	*Variant_SByte
	//	*Variant_Byte
	//	*Variant_Int16
	//	*Variant_UInt16
	//	*Variant_Int32
	//	*Variant_UInt32
	//	*Variant_Int64
	//	*Variant_UInt64
	//	*Variant_Float
	//	*Variant_Double
	//	*Variant_String_
	//	*Variant_DateTime
	//	*Variant_Guid
	//	*Variant_ByteString
	//	*Variant_BooleanArray
	//	*Variant_SByteArray
	//	*Variant_ByteArray
	//	*Variant_Int16Array
	//	*Variant_UInt16Array
	//	*Variant_Int32Array
	//	*Variant_UInt32Array
	//	*Variant_Int64Array
	//	*Variant_UInt64Array
	//	*Variant_FloatArray
	//	*Variant_DoubleArray
	//	*Variant_StringArray
	//	*Variant_DateTimeArray
	//	*Variant_GuidArray
	//	*Variant_ByteStringArray
	Value isVariant_Value `protobuf_oneof:"value"`
}

func (x *Variant) Reset() {
	*x = Variant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opcua_variant_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant) ProtoMessage() {}

func (x *Variant) ProtoReflect() protoreflect.Message {
	mi := &file_opcua_variant_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variant.ProtoReflect.Descriptor instead.
func (*Variant) Descriptor() ([]byte, []int) {
	return file_opcua_variant_proto_rawDescGZIP(), []int{11}
}

func (m *Variant) GetValue() isVariant_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Variant) GetNull() *Null {
	if x, ok := x.GetValue().(*Variant_Null); ok {
		return x.Null
	}
	return nil
}

func (x *Variant) GetBoolean() bool {
	if x, ok := x.GetValue().(*Variant_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *Variant) GetSByte() int32 {
	if x, ok := x.GetValue().(*Variant_SByte); ok {
		return x.SByte
	}
	return 0
}

func (x *Variant) GetByte() uint32 {
	if x, ok := x.GetValue().(*Variant_Byte); ok {
		return x.Byte
	}
	return 0
}

func (x *Variant) GetInt16() int32 {
	if x, ok := x.GetValue().(*Variant_Int16); ok {
		return x.Int16
	}
	return 0
}

func (x *Variant) GetUInt16() uint32 {
	if x, ok := x.GetValue().(*Variant_UInt16); ok {
		return x.UInt16
	}
	return 0
}

func (x *Variant) GetInt32() int32 {
	if x, ok := x.GetValue().(*Variant_Int32); ok {
		return x.Int32
	}
	return 0
}

func (x *Variant) GetUInt32() uint32 {
	if x, ok := x.GetValue().(*Variant_UInt32); ok {
		return x.UInt32
	}
	return 0
}

func (x *Variant) GetInt64() int64 {
	if x, ok := x.GetValue().(*Variant_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *Variant) GetUInt64() uint64 {
	if x, ok := x.GetValue().(*Variant_UInt64); ok {
		return x.UInt64
	}
	return 0
}

func (x *Variant) GetFloat() float32 {
	if x, ok := x.GetValue().(*Variant_Float); ok {
		return x.Float
	}
	return 0
}

func (x *Variant) GetDouble() float64 {
	if x, ok := x.GetValue().(*Variant_Double); ok {
		return x.Double
	}
	return 0
}

func (x *Variant) GetString_() string {
	if x, ok := x.GetValue().(*Variant_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Variant) GetDateTime() *timestamp.Timestamp {
	if x, ok := x.GetValue().(*Variant_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Variant) GetGuid() []byte {
	if x, ok := x.GetValue().(*Variant_Guid); ok {
		return x.Guid
	}
	return nil
}

func (x *Variant) GetByteString() []byte {
	if x, ok := x.GetValue().(*Variant_ByteString); ok {
		return x.ByteString
	}
	return nil
}

func (x *Variant) GetBooleanArray() *BooleanArray {
	if x, ok := x.GetValue().(*Variant_BooleanArray); ok {
		return x.BooleanArray
	}
	return nil
}

func (x *Variant) GetSByteArray() *Int32Array {
	if x, ok := x.GetValue().(*Variant_SByteArray); ok {
		return x.SByteArray
	}
	return nil
}

func (x *Variant) GetByteArray() *UInt32Array {
	if x, ok := x.GetValue().(*Variant_ByteArray); ok {
		return x.ByteArray
	}
	return nil
}

func (x *Variant) GetInt16Array() *Int32Array {
	if x, ok := x.GetValue().(*Variant_Int16Array); ok {
		return x.Int16Array
	}
	return nil
}

func (x *Variant) GetUInt16Array() *UInt32Array {
	if x, ok := x.GetValue().(*Variant_UInt16Array); ok {
		return x.UInt16Array
	}
	return nil
}

func (x *Variant) GetInt32Array() *Int32Array {
	if x, ok := x.GetValue().(*Variant_Int32Array); ok {
		return x.Int32Array
	}
	return nil
}

func (x *Variant) GetUInt32Array() *UInt32Array {
	if x, ok := x.GetValue().(*Variant_UInt32Array); ok {
		return x.UInt32Array
	}
	return nil
}

func (x *Variant) GetInt64Array() *Int64Array {
	if x, ok := x.GetValue().(*Variant_Int64Array); ok {
		return x.Int64Array
	}
	return nil
}

func (x *Variant) GetUInt64Array() *UInt64Array {
	if x, ok := x.GetValue().(*Variant_UInt64Array); ok {
		return x.UInt64Array
	}
	return nil
}

func (x *Variant) GetFloatArray() *FloatArray {
	if x, ok := x.GetValue().(*Variant_FloatArray); ok {
		return x.FloatArray
	}
	return nil
}

func (x *Variant) GetDoubleArray() *DoubleArray {
	if x, ok := x.GetValue().(*Variant_DoubleArray); ok {
		return x.DoubleArray
	}
	return nil
}

func (x *Variant) GetStringArray() *StringArray {
	if x, ok := x.GetValue().(*Variant_StringArray); ok {
		return x.StringArray
	}
	return nil
}

func (x *Variant) GetDateTimeArray() *TimestampArray {
	if x, ok := x.GetValue().(*Variant_DateTimeArray); ok {
		return x.DateTimeArray
	}
	return nil
}

func (x *Variant) GetGuidArray() *BytesArray {
	if x, ok := x.GetValue().(*Variant_GuidArray); ok {
		return x.GuidArray
	}
	return nil
}

func (x *Variant) GetByteStringArray() *BytesArray {
	if x, ok := x.GetValue().(*Variant_ByteStringArray); ok {
		return x.ByteStringArray
	}
	return nil
}

type isVariant_Value interface {
	isVariant_Value()
}

type Variant_Null struct {
	Null *Null `protobuf:"bytes,127,opt,name=Null,proto3,oneof"`
}

type Variant_Boolean struct {
	Boolean bool `protobuf:"varint,1,opt,name=Boolean,proto3,oneof"`
}

type Variant_SByte struct {
	SByte int32 `protobuf:"zigzag32,2,opt,name=SByte,proto3,oneof"`
}

type Variant_Byte struct {
	Byte uint32 `protobuf:"varint,3,opt,name=Byte,proto3,oneof"`
}

type Variant_Int16 struct {
	Int16 int32 `protobuf:"zigzag32,4,opt,name=Int16,proto3,oneof"`
}

type Variant_UInt16 struct {
	UInt16 uint32 `protobuf:"varint,5,opt,name=UInt16,proto3,oneof"`
}

type Variant_Int32 struct {
	Int32 int32 `protobuf:"zigzag32,6,opt,name=Int32,proto3,oneof"`
}

type Variant_UInt32 struct {
	UInt32 uint32 `protobuf:"varint,7,opt,name=UInt32,proto3,oneof"`
}

type Variant_Int64 struct {
	Int64 int64 `protobuf:"zigzag64,8,opt,name=Int64,proto3,oneof"`
}

type Variant_UInt64 struct {
	UInt64 uint64 `protobuf:"varint,9,opt,name=UInt64,proto3,oneof"`
}

type Variant_Float struct {
	Float float32 `protobuf:"fixed32,10,opt,name=Float,proto3,oneof"`
}

type Variant_Double struct {
	Double float64 `protobuf:"fixed64,11,opt,name=Double,proto3,oneof"`
}

type Variant_String_ struct {
	String_ string `protobuf:"bytes,12,opt,name=String,proto3,oneof"`
}

type Variant_DateTime struct {
	DateTime *timestamp.Timestamp `protobuf:"bytes,13,opt,name=DateTime,proto3,oneof"`
}

type Variant_Guid struct {
	Guid []byte `protobuf:"bytes,14,opt,name=Guid,proto3,oneof"`
}

type Variant_ByteString struct {
	ByteString []byte `protobuf:"bytes,15,opt,name=ByteString,proto3,oneof"`
}

type Variant_BooleanArray struct {
	BooleanArray *BooleanArray `protobuf:"bytes,51,opt,name=BooleanArray,proto3,oneof"`
}

type Variant_SByteArray struct {
	SByteArray *Int32Array `protobuf:"bytes,52,opt,name=SByteArray,proto3,oneof"`
}

type Variant_ByteArray struct {
	ByteArray *UInt32Array `protobuf:"bytes,53,opt,name=ByteArray,proto3,oneof"`
}

type Variant_Int16Array struct {
	Int16Array *Int32Array `protobuf:"bytes,54,opt,name=Int16Array,proto3,oneof"`
}

type Variant_UInt16Array struct {
	UInt16Array *UInt32Array `protobuf:"bytes,55,opt,name=UInt16Array,proto3,oneof"`
}

type Variant_Int32Array struct {
	Int32Array *Int32Array `protobuf:"bytes,56,opt,name=Int32Array,proto3,oneof"`
}

type Variant_UInt32Array struct {
	UInt32Array *UInt32Array `protobuf:"bytes,57,opt,name=UInt32Array,proto3,oneof"`
}

type Variant_Int64Array struct {
	Int64Array *Int64Array `protobuf:"bytes,58,opt,name=Int64Array,proto3,oneof"`
}

type Variant_UInt64Array struct {
	UInt64Array *UInt64Array `protobuf:"bytes,59,opt,name=UInt64Array,proto3,oneof"`
}

type Variant_FloatArray struct {
	FloatArray *FloatArray `protobuf:"bytes,60,opt,name=FloatArray,proto3,oneof"`
}

type Variant_DoubleArray struct {
	DoubleArray *DoubleArray `protobuf:"bytes,61,opt,name=DoubleArray,proto3,oneof"`
}

type Variant_StringArray struct {
	StringArray *StringArray `protobuf:"bytes,62,opt,name=StringArray,proto3,oneof"`
}

type Variant_DateTimeArray struct {
	DateTimeArray *TimestampArray `protobuf:"bytes,63,opt,name=DateTimeArray,proto3,oneof"`
}

type Variant_GuidArray struct {
	GuidArray *BytesArray `protobuf:"bytes,64,opt,name=GuidArray,proto3,oneof"`
}

type Variant_ByteStringArray struct {
	ByteStringArray *BytesArray `protobuf:"bytes,65,opt,name=ByteStringArray,proto3,oneof"`
}

func (*Variant_Null) isVariant_Value() {}

func (*Variant_Boolean) isVariant_Value() {}

func (*Variant_SByte) isVariant_Value() {}

func (*Variant_Byte) isVariant_Value() {}

func (*Variant_Int16) isVariant_Value() {}

func (*Variant_UInt16) isVariant_Value() {}

func (*Variant_Int32) isVariant_Value() {}

func (*Variant_UInt32) isVariant_Value() {}

func (*Variant_Int64) isVariant_Value() {}

func (*Variant_UInt64) isVariant_Value() {}

func (*Variant_Float) isVariant_Value() {}

func (*Variant_Double) isVariant_Value() {}

func (*Variant_String_) isVariant_Value() {}

func (*Variant_DateTime) isVariant_Value() {}

func (*Variant_Guid) isVariant_Value() {}

func (*Variant_ByteString) isVariant_Value() {}

func (*Variant_BooleanArray) isVariant_Value() {}

func (*Variant_SByteArray) isVariant_Value() {}

func (*Variant_ByteArray) isVariant_Value() {}

func (*Variant_Int16Array) isVariant_Value() {}

func (*Variant_UInt16Array) isVariant_Value() {}

func (*Variant_Int32Array) isVariant_Value() {}

func (*Variant_UInt32Array) isVariant_Value() {}

func (*Variant_Int64Array) isVariant_Value() {}

func (*Variant_UInt64Array) isVariant_Value() {}

func (*Variant_FloatArray) isVariant_Value() {}

func (*Variant_DoubleArray) isVariant_Value() {}

func (*Variant_StringArray) isVariant_Value() {}

func (*Variant_DateTimeArray) isVariant_Value() {}

func (*Variant_GuidArray) isVariant_Value() {}

func (*Variant_ByteStringArray) isVariant_Value() {}

var File_opcua_variant_proto protoreflect.FileDescriptor

var file_opcua_variant_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x06, 0x0a,
	0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x24, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x23, 0x0a, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a,
	0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x23, 0x0a, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x0e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x22, 0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x94, 0x0a, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x16,
	0x0a, 0x05, 0x53, 0x42, 0x79, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52,
	0x05, 0x53, 0x42, 0x79, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x42, 0x79, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x42, 0x79, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x05,
	0x49, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x05, 0x49,
	0x6e, 0x74, 0x31, 0x36, 0x12, 0x18, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x16,
	0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52,
	0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x16, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x48,
	0x00, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x16, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x47, 0x75, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x47, 0x75, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x39, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x53,
	0x42, 0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x53, 0x42, 0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x32, 0x0a, 0x09, 0x42, 0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x09, 0x42, 0x79, 0x74, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x49,
	0x6e, 0x74, 0x31, 0x36, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x55, 0x49, 0x6e,
	0x74, 0x31, 0x36, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x33, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70,
	0x63, 0x75, 0x61, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48,
	0x00, 0x52, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x33,
	0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x36, 0x0a, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x48, 0x00, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x3d, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00,
	0x52, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x31, 0x0a, 0x09, 0x47, 0x75, 0x69, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x09, 0x47, 0x75, 0x69, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x3d, 0x0a, 0x0f, 0x42, 0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70,
	0x63, 0x75, 0x61, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00,
	0x52, 0x0f, 0x42, 0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b,
	0x6f, 0x70, 0x63, 0x75, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opcua_variant_proto_rawDescOnce sync.Once
	file_opcua_variant_proto_rawDescData = file_opcua_variant_proto_rawDesc
)

func file_opcua_variant_proto_rawDescGZIP() []byte {
	file_opcua_variant_proto_rawDescOnce.Do(func() {
		file_opcua_variant_proto_rawDescData = protoimpl.X.CompressGZIP(file_opcua_variant_proto_rawDescData)
	})
	return file_opcua_variant_proto_rawDescData
}

var file_opcua_variant_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_opcua_variant_proto_goTypes = []interface{}{
	(*Null)(nil),                // 0: opcua.Null
	(*BooleanArray)(nil),        // 1: opcua.BooleanArray
	(*Int32Array)(nil),          // 2: opcua.Int32Array
	(*UInt32Array)(nil),         // 3: opcua.UInt32Array
	(*Int64Array)(nil),          // 4: opcua.Int64Array
	(*UInt64Array)(nil),         // 5: opcua.UInt64Array
	(*FloatArray)(nil),          // 6: opcua.FloatArray
	(*DoubleArray)(nil),         // 7: opcua.DoubleArray
	(*StringArray)(nil),         // 8: opcua.StringArray
	(*TimestampArray)(nil),      // 9: opcua.TimestampArray
	(*BytesArray)(nil),          // 10: opcua.BytesArray
	(*Variant)(nil),             // 11: opcua.Variant
	(*timestamp.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_opcua_variant_proto_depIdxs = []int32{
	12, // 0: opcua.TimestampArray.value:type_name -> google.protobuf.Timestamp
	0,  // 1: opcua.Variant.Null:type_name -> opcua.Null
	12, // 2: opcua.Variant.DateTime:type_name -> google.protobuf.Timestamp
	1,  // 3: opcua.Variant.BooleanArray:type_name -> opcua.BooleanArray
	2,  // 4: opcua.Variant.SByteArray:type_name -> opcua.Int32Array
	3,  // 5: opcua.Variant.ByteArray:type_name -> opcua.UInt32Array
	2,  // 6: opcua.Variant.Int16Array:type_name -> opcua.Int32Array
	3,  // 7: opcua.Variant.UInt16Array:type_name -> opcua.UInt32Array
	2,  // 8: opcua.Variant.Int32Array:type_name -> opcua.Int32Array
	3,  // 9: opcua.Variant.UInt32Array:type_name -> opcua.UInt32Array
	4,  // 10: opcua.Variant.Int64Array:type_name -> opcua.Int64Array
	5,  // 11: opcua.Variant.UInt64Array:type_name -> opcua.UInt64Array
	6,  // 12: opcua.Variant.FloatArray:type_name -> opcua.FloatArray
	7,  // 13: opcua.Variant.DoubleArray:type_name -> opcua.DoubleArray
	8,  // 14: opcua.Variant.StringArray:type_name -> opcua.StringArray
	9,  // 15: opcua.Variant.DateTimeArray:type_name -> opcua.TimestampArray
	10, // 16: opcua.Variant.GuidArray:type_name -> opcua.BytesArray
	10, // 17: opcua.Variant.ByteStringArray:type_name -> opcua.BytesArray
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_opcua_variant_proto_init() }
func file_opcua_variant_proto_init() {
	if File_opcua_variant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opcua_variant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opcua_variant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opcua_variant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opcua_variant_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UInt32Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opcua_variant_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int64Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opcua_variant_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UInt64Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opcua_variant_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opcua_variant_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opcua_variant_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opcua_variant_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opcua_variant_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opcua_variant_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_opcua_variant_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Variant_Null)(nil),
		(*Variant_Boolean)(nil),
		(*Variant_SByte)(nil),
		(*Variant_Byte)(nil),
		(*Variant_Int16)(nil),
		(*Variant_UInt16)(nil),
		(*Variant_Int32)(nil),
		(*Variant_UInt32)(nil),
		(*Variant_Int64)(nil),
		(*Variant_UInt64)(nil),
		(*Variant_Float)(nil),
		(*Variant_Double)(nil),
		(*Variant_String_)(nil),
		(*Variant_DateTime)(nil),
		(*Variant_Guid)(nil),
		(*Variant_ByteString)(nil),
		(*Variant_BooleanArray)(nil),
		(*Variant_SByteArray)(nil),
		(*Variant_ByteArray)(nil),
		(*Variant_Int16Array)(nil),
		(*Variant_UInt16Array)(nil),
		(*Variant_Int32Array)(nil),
		(*Variant_UInt32Array)(nil),
		(*Variant_Int64Array)(nil),
		(*Variant_UInt64Array)(nil),
		(*Variant_FloatArray)(nil),
		(*Variant_DoubleArray)(nil),
		(*Variant_StringArray)(nil),
		(*Variant_DateTimeArray)(nil),
		(*Variant_GuidArray)(nil),
		(*Variant_ByteStringArray)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opcua_variant_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opcua_variant_proto_goTypes,
		DependencyIndexes: file_opcua_variant_proto_depIdxs,
		MessageInfos:      file_opcua_variant_proto_msgTypes,
	}.Build()
	File_opcua_variant_proto = out.File
	file_opcua_variant_proto_rawDesc = nil
	file_opcua_variant_proto_goTypes = nil
	file_opcua_variant_proto_depIdxs = nil
}
